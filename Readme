# 🛠️ User Profile Management API

user profile management system built with Node.js, Express, MongoDB, and JWT Authentication. It includes secure login, refresh tokens, protected routes, profile CRUD, and image upload via Cloudinary.

##  Features
- Secure JWT-based authentication (access + refresh tokens)
- Refresh token system (stored in HTTP-only cookies)
- User profile CRUD (Create, Read, Update, Delete)
- Upload profile picture to Cloudinary
- Protected API routes via middleware
- Basic frontend with React + Tailwind CSS for testing

## ⚙️ Tech Stack

Backend:
- Node.js, Express, MongoDB, Mongoose
- JWT, Multer, Cloudinary, Cookie-parser, Dotenv

Frontend: for testing purpose only
- React, Tailwind CSS (optional)

##  Getting Started

Clone the repository and install dependencies:

```bash
git clone https://github.com/manishraj771/user-profile
cd user-profile
npm install
```

Create a `.env` file inside the backend folder with the following content:

```env
PORT=5000
MONGO_URI=mongodb+srv://<your_credentials>
JWT_SECRET=your_jwt_secret_key
JWT_ACCESS_EXPIRE=15m
JWT_REFRESH_EXPIRE=7d
CLOUDINARY_CLOUD_NAME=your_cloud_name
CLOUDINARY_API_KEY=your_api_key
CLOUDINARY_API_SECRET=your_api_secret
```

Start the backend server:

```bash
node server.js
```

The backend will run at: http://localhost:5000

## 📬 API Endpoints

1. **Register a new user**
   - `POST /api/users/register`
   - Body:
   ```json
   {
     "name": "John Doe",
     "email": "john@example.com",
     "address": "123 Main St",
     "password": "yourpassword"
   }
   ```

2. **Login**
   - `POST /api/users/login`
   - Body:
   ```json
   {
     "email": "john@example.com",
     "password": "yourpassword"
   }
   ```

3. **Get user profile**
   - `GET /api/users/profile`
   - Headers: `Authorization: Bearer <accessToken>`

4. **Update profile**
   - `PUT /api/users/profile`
   - Headers: `Authorization: Bearer <accessToken>`
   - Body:
   ```json
   {
     "bio": "Loves coding",
     "address": "456 Dev Street"
   }
   ```

5. **Upload profile picture**
   - `POST /api/users/profile/upload`
   - Headers: `Authorization: Bearer <accessToken>`
   - Form-Data: `profilePicture` (type: file)

6. **Delete user account**
   - `DELETE /api/users/profile`
   - Headers: `Authorization: Bearer <accessToken>`

7. **Refresh token**
   - `POST /api/users/refresh`
   - Uses cookie from login

## 🧪 Postman Collection

Use the file: `user-profile-api.postman_collection.json` included in the repo for testing.

## 🖥️ Frontend (Optional)

If you want to test the frontend:

```bash
cd ../client
npm install
npm start
```

## 📁 Folder Structure

```
user-profile
├── 
│   ├── controllers/
│   ├── middleware/
│   ├── models/
│   ├── routes/
│   ├── utils/
│   └── server.js
├── client/
│   └── (React frontend)
└── user-profile-api.postman_collection.json
```

